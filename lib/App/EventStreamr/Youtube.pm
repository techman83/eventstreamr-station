package App::EventStreamr::Youtube;
use Method::Signatures;
use Scalar::Util::Reftype;
use Carp 'croak';
use Module::Load;
use Moo;
use namespace::clean;

# ABSTRACT: A Youtube object

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

This package provides an extendable class for starting/stopping
youtube services.

=head1 DESCRIPTION

This package provides the core run/stop logic for Ingest Devices. A 
backend specific package will extend this and provide any extra logic 
specific to its needs.

'backend' is expected to be overridden by the consuming role.

=cut

my $ConfigRef = sub {
  croak "config isn't a 'App::EventStreamr::Config' object!" unless reftype( $_[0] )->class eq "App::EventStreamr::Config";
};

my $StatusRef = sub {
  croak "config isn't a 'App::EventStreamr::Status' object!" unless reftype( $_[0] )->class eq "App::EventStreamr::Status";
};

has 'config'      => ( is => 'rw', required => 1, isa => $ConfigRef );
has 'status'      => ( is => 'rw', required => 1, isa => $StatusRef );
has 'backend'     => ( is => 'ro', default => sub { 'DVswitch' } );
has 'type'        => ( is => 'ro', default => sub { 'stream' } );
has 'id'          => ( is => 'ro', default => sub { 'stream' } );
has '_youtube'    => ( is => 'ro', default => sub { { } } );
has '_services'   => ( is => 'ro', default => sub { ["DVfifo","Youtube"] } );

method _load_package($youtube) {
  my $pkg = "App::EventStreamr::".$self->backend."::Youtube::".$youtube;
  load $pkg;
  $self->_youtube->{$youtube} = $pkg->new(
    device => $youtube,
    id => $youtube,
    config => $self->config,
    status => $self->status,
  );
}

=method start

  $youtube->start()

Will start all configured youtube.

=cut

method start() {
  foreach my $youtube ($self->_services) {
    if (! defined $self->_youtube->{$youtube}) {
      $self->_load_package($youtube);
    }
    $self->_youtube->{$youtube}->start();
  }
}

=method run_stop

  $ingest->run_stop()

Will start all configured youtube if they're intended to be running 
or stop them if they're not.

=cut

method run_stop() {
  foreach my $youtube (@{$self->_services}) {
    if (! defined $self->_youtube->{$youtube}) {
      $self->_load_package($youtube);
    }
    $self->_youtube->{$youtube}->run_stop();
  }
}

=method stop

  $ingest->stop()

Will stop all configured youtube.

=cut

method stop() {
  foreach my $youtube (@{$self->_services}) {
    if (! defined $self->_youtube->{$youtube}) {
      $self->_load_package($youtube);
    }
    $self->_youtube->{$youtube}->stop();
  }
}

1;
